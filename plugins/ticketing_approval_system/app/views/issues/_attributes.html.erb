<%= labelled_fields_for :issue, @issue do |f| %>
    <div class="splitcontent">
      <div class="splitcontentleft">
        <% if @issue.safe_attribute?('status_id') && @allowed_statuses.present? %>
            <% tracker_status =  IssueSlaStatus.where(:project_id => @issue.project.id, :tracker_id => @issue.tracker.id) %>

            <% statuses = @allowed_statuses.collect {|p| [p.name, p.id] if tracker_status.map(&:issue_status_id).include? p.id} %>
            <% author = (User.current.id==@issue.author_id || User.current.admin?)%>

            <% @approval_state =  @issue.ticket_approval_flows.present? && @issue.ticket_approval_flows.last.user_id == @issue.author_id%>

            <% if @issue.project.enabled_modules.map(&:name).include?('redmine_issue_sla') %>
                <p><%= f.select :status_id, statuses.compact, {:required => true},
                            {:onchange => "updateIssueFrom('#{escape_javascript project_issue_form_path(@project, :id => @issue, :format => 'js')}')",:class => 'tracker_status','data_is_author' => author,'data_status_id'=>@issue.status_id_was, :disabled => (!params[:id].present? ||@approval_state) } %></p>
             <%else%>
                <p><%= f.select :status_id, (@allowed_statuses.collect {|p| [p.name, p.id]}), {:required => true},
                                {:onchange => "updateIssueFrom('#{escape_javascript project_issue_form_path(@project, :id => @issue, :format => 'js')}')",'data_is_author' => author,'data_status_id'=>@issue.status_id_was,  :disabled => (!params[:id].present? || @approval_state) }%></p>
             <%end%>


        <% else %>
            <p><label><%= l(:field_status) %></label> <%= h(@issue.status.name) %></p>
        <% end %>

        <% if @issue.safe_attribute? 'priority_id' %>
            <% tracker_sla =  IssueSla.where(:project_id => @issue.project.id, :tracker_id => @issue.tracker.id) %>
            <% priorities = IssuePriority.find tracker_sla.map(&:priority_id) %>

            <% if @issue.project.enabled_modules.map(&:name).include?('redmine_issue_sla') %>
                <p><%= f.select :priority_id, (priorities.collect {|p| [p.name, p.id]}), {:required => true}, :disabled => !@issue.leaf? ,:class => 'tracker_priority'%></p>
            <%else%>
                <p><%= f.select :priority_id, (@priorities.collect {|p| [p.name, p.id]}), {:required => true}, :disabled => !@issue.leaf? %></p>
            <%end%>

        <% end %>
        <% if (@issue.id.present?&&@issue.safe_attribute?( 'assigned_to_id')) %>
            <p id="members_list" style="display: none">
            <%= f.select :assigned_to_id,[],  :include_blank => true, :required => @issue.required_attribute?('assigned_to_id') , :id => 'toggle_users' %>
            <%#= f.select :assigned_to_id, principals_options_for_select(@issue.assignable_users , @issue.assigned_to), :include_blank => true, :required => @issue.required_attribute?('assigned_to_id') , :id => 'toggle_users'%></p>
            <p id="team_member_list"><%= f.select :assigned_to_id, principals_options_for_select(@issue.project.return_team_and_group(@issue) , @issue.assigned_to), :include_blank => true, :required => @issue.required_attribute?('assigned_to_id')  , :id => 'toggle_member'%><span id="list_member" title="List all users"><span class="toggle-multiselect">&nbsp;</span></span></p>
        <% end %>

        <% if @issue.safe_attribute?('category_id') && @issue.project.issue_categories.any? %>
            <p><%= f.select :category_id, (@issue.project.issue_categories.collect {|c| [c.name, c.id]}), :include_blank => true, :required => @issue.required_attribute?('category_id') %>
              <%= link_to(image_tag('add.png', :style => 'vertical-align: middle;'),
                          new_project_issue_category_path(@issue.project),
                          :remote => true,
                          :method => 'get',
                          :title => l(:label_issue_category_new),
                          :tabindex => 200) if User.current.allowed_to?(:manage_categories, @issue.project) %></p>
        <% end %>

        <% if @issue.safe_attribute?('fixed_version_id') && @issue.assignable_versions.any? %>
            <p><%= f.select :fixed_version_id, version_options_for_select(@issue.assignable_versions, @issue.fixed_version), :include_blank => true, :required => @issue.required_attribute?('fixed_version_id') %>
              <%= link_to(image_tag('add.png', :style => 'vertical-align: middle;'),
                          new_project_version_path(@issue.project),
                          :remote => true,
                          :method => 'get',
                          :title => l(:label_version_new),
                          :tabindex => 200) if User.current.allowed_to?(:manage_versions, @issue.project) %>
            </p>
        <% end %>
      </div>

      <div class="splitcontentright">
        <% if @issue.safe_attribute? 'parent_issue_id' %>
            <p id="parent_issue"><%= f.text_field :parent_issue_id, :size => 10, :required => @issue.required_attribute?('parent_issue_id') %></p>
            <%= javascript_tag "observeAutocompleteField('issue_parent_issue_id', '#{escape_javascript auto_complete_issues_path}')" %>
        <% end %>

        <% if @issue.safe_attribute? 'start_date' %>
            <p id="start_date_area">
              <%= f.text_field(:start_date, :size => 10, :disabled => !@issue.leaf?,
                               :required => @issue.required_attribute?('start_date')) %>
              <%= calendar_for('issue_start_date') if @issue.leaf? %>
            </p>
        <% end %>

        <% if @issue.safe_attribute? 'due_date' %>
            <p id="due_date_area">
              <%= f.text_field(:due_date, :size => 10, :disabled => !@issue.leaf?,
                               :required => @issue.required_attribute?('due_date')) %>
              <%= calendar_for('issue_due_date') if @issue.leaf? %>
            </p>
        <% end %>

        <% if @issue.safe_attribute? 'estimated_hours' %>
            <p><%= f.text_field :estimated_hours, :size => 3,:disabled => !@issue.leaf?,  :required => @issue.required_attribute?('estimated_hours') %> <%= l(:field_hours) %></p>
        <% end %>

        <% if @issue.safe_attribute?('done_ratio') && @issue.leaf? && Issue.use_field_for_done_ratio? %>
            <p><%= f.select :done_ratio, ((0..10).to_a.collect {|r| ["#{r*10} %", r*10] }), :required => @issue.required_attribute?('done_ratio') %></p>
        <% end %>
      </div>
    </div>

    <% if @issue.safe_attribute? 'custom_field_values' %>
        <%= render :partial => 'issues/form_custom_fields' %>
    <% end %>

<% end %>

<% include_calendar_headers_tags %>
<%= javascript_tag do %>
    $(document).ready(function(){
      var query_params = window.location.href.split('?')
      var issue = query_params[0].split('/')
      var issue_id = issue[issue.length-1]

        $('#list_member').on('click',function(){
            $('#team_member_list').remove();
            $('#members_list').show();
            var department = $(this).val();
            $.ajax({
            type: "get",
            url: '/projects/' + issue_id + '/approval_definitions/get_assignable_users/',
            dataType: 'json',
            type: "GET",
            success: function(data) {
            var $el = $("#issue_assigned_to_id");
            $el.empty(); // remove old options
            $el.append($("<option></option>").attr("value", '').text('Please Select'));
            $.each(data.result, function(key,val) {
            $el.append($("<option></option>").attr("value", val[0]).text(val[1]));
            });
            }
            });
            $('#list_member').css('display','none');;
        });
    });
<%end%>