<%= javascript_include_tag 'ticketing_approval', :plugin => "ticketing_approval_system" %>
<%= stylesheet_link_tag 'ticketing_approval', :plugin => "ticketing_approval_system" %>
<%= javascript_include_tag 'jRate', :plugin => "ticketing_approval_system" %>
<div id="errorExplanation" class="tkt_err" style="display: none"><ul><li></li></ul></div>


<%= labelled_fields_for :issue, @issue do |f| %>
    <%= call_hook(:view_issues_form_details_top, { :issue => @issue, :form => f }) %>

    <% if @issue.safe_attribute? 'is_private' %>
        <p style="float:right; margin-right:1em;">
          <%= f.check_box :is_private, :no_label => true %><label class="inline" for="issue_is_private" id="issue_is_private_label"><%= l(:field_is_private) %></label>
        </p>
    <% end %>

    <% if @issue.safe_attribute? 'project_id' %>
        <p><%= f.select :project_id, project_tree_options_for_select(@issue.allowed_target_projects, :selected => @issue.project), {:required => true},
                        :onchange => "updateIssueFrom('#{escape_javascript project_issue_form_path(@project, :id => @issue, :format => 'js')}')" %></p>
    <% end %>

    <% if @issue.safe_attribute? 'tracker_id' %>


        <%if @issue.project.enabled_modules.map(&:name).include?('redmine_issue_sla')%>
            <p><%= f.select :tracker_id, @issue.project.trackers.collect {|t| [t.name, t.id]}, {:required => true}, 'data-url' => project_issue_form_path(@project, :id => @issue), :class => 'form_tracker',:onchange => "updateIssueFrom('#{escape_javascript project_issue_form_path(@project, :id => @issue, :format => 'js')}'), updatetrackerFrom('#{escape_javascript set_tracker_project_approval_definitions_path(@project, :id => @issue, :format => 'js')}')"  %></p>
        <%elsif @issue.project.enabled_modules.map(&:name).include?('ticketing_approval_system') %>

            <p id="tkt_tracker"><%= f.select :tracker_id, @issue.project.trackers.collect {|t| [t.name, t.id]}, {:required => true},
                                             :onchange => "updateIssueFrom('#{escape_javascript project_issue_form_path(@project, :id => @issue, :format => 'js')}'), updatetrackerFrom('#{escape_javascript set_tracker_project_approval_definitions_path(@project, :id => @issue, :format => 'js')}')" %>
            </p>
        <%else%>
            <p><%= f.select :tracker_id, @issue.project.trackers.collect {|t| [t.name, t.id]}, {:required => true} %></p>
        <%end%>

    <% end %>
    <div id="ticketing_flow">
      <% inia_proj = params[:tickets].present? ? params[:tickets][:project_id] : nil%>
      <% inia_cat = params[:tickets].present? ? params[:tickets][:category_id] : nil%>
        <% if Redmine::Plugin.registered_plugins[:inia_projects] != nil  %>
            <% project_array = IniaMember.where(user_id: User.current.id).compact.collect{|s|s.inia_project if s.inia_project.present? && s.inia_project.status==1 } %>
        <% else %>
          <% project_array = Member.where(user_id: User.current.id).compact.collect{|s|s.project if s.project.active? } %>
        <% end %>
      <p><span><%= label_tag "From Project / Dept." %><span class="required">*</span></span><%= select_tag :ticketing_project_id, options_from_collection_for_select(project_array.compact, 'id', 'name', inia_proj), {name: 'tickets[project_id]', :prompt => '--- Select Project --'} %></p>
      <p id="tkt_cat"><span><%= label_tag 'Category' %><span class="required">*</span></span>
          <% project_categories =  @issue.project.project_categories.present? ? @issue.project.project_categories.collect{|r|[r.cat_name, r.id]} : [] %>

        <%= select_tag :project_category_id, options_for_select(project_categories,inia_cat), {name: 'tickets[category_id]', 'data-project-code' => params[:project_id], :id=> 'cat_select', :prompt => '--- Select Category --' }%> </p>
      <p id="request_for"><span><%= label_tag 'Request For' %><span class="required">*</span></span><input id='tkt_frm_sub' class='suggest_tkt' name='issue[subject]'  style='width: 35%' data-tag=<%= @tag_id %>/></p>

    </div>
    <% plugin_list = []%>
    <% Redmine::Plugin.registered_plugins.each{ |x| plugin_list << x[0] } %>

    <%if  plugin_list.include?(:redmine_issue_sla) && @issue.project.enabled_modules.map(&:name).include?('redmine_issue_sla')%>
        <% state =  IssueSlaStatus.where(:project_id => @issue.project.id, :tracker_id => @issue.tracker.id, :issue_status_id => @issue.status.id).last%>
        <% if state.present? %>
            <% state = state%>
        <%else%>
            <% state =  IssueSlaStatus.where(:project_id => @issue.project.id, :tracker_id => @issue.tracker.id).last%>
        <% end %>
        <%= hidden_field_tag(:old_status_id, state.id) if state.present? %>

    <% end %>

    <div id="normal_flow">
      <% if @issue.safe_attribute? 'subject' %>
          <% if params[:id].present? %>
            <% ticket_id = @issue.issue_ticket_tag.present? ? @issue.issue_ticket_tag.ticket_tag_id : nil%>
              <% else %>
              <% ticket_id = 0 %>
          <% end %>
          <p id="issue_sub"><%= f.text_field :subject, :size => 80, :maxlength => 255, :required => true, :id => 'frm_sub', data:{tag: ticket_id} %></p>
      <% end %>
      <% if !@issue.closed? && @issue.status.name != 'Resolved' && @issue.id.nil? %>
          <div id="access_users">
            <p id="watchers_form"><label><%= l(:label_issue_access_users) %></label>
            <span id="access_users_inputs">
            <%#= @available_access_users.inspect %>
              <%#= access_users_checkboxes(@issue, @available_access_users) %>
            </span>
            <span class="search_for_watchers" >
            <%#= link_to l(:label_search_for_access_users),
                      {:controller => 'watchers', :action => 'new', :project_id => @issue.project},
                      :remote => true,
                      :method => 'get' %>
              <%= link_to l(:label_search_for_access_users),
                          '#',:onclick=>"accessUsers();",:id=> "access_user"
              %>
            </span>
            </p>
          </div>
      <% end %>
      <% if @issue.safe_attribute? 'description' %>
          <p>
            <%= f.label_for_field :description, :required => @issue.required_attribute?('description') %>
            <%= link_to_function image_tag('edit.png'), '$(this).hide(); $("#issue_description_and_toolbar").show()' unless @issue.new_record? %>
            <%= content_tag 'span', :id => "issue_description_and_toolbar", :style => (@issue.new_record? ? nil : 'display:none') do %>
                <%= f.text_area :description,
                                :cols => 60,
                                :rows => (@issue.description.blank? ? 10 : [[10, @issue.description.length / 50].max, 100].min),
                                :accesskey => accesskey(:edit),
                                :class => 'wiki-edit',
                                :placeholder => "Please ensure the following points are followed wile raising a ticket, if not the ticket will be rejected. \r\n • Provide the detailed description, reason and justification for the request. \r\n • Do not add multiple request in a single ticket. \n • Do not mention multiple user request in the ticket description. Instead, use the “Add multiple users” option above the ‘Description & Reason for request’ field.",
                                :no_label => true %>
            <% end %>
          </p>
          <%= wikitoolbar_for 'issue_description' %>
      <% end %>
    </div>

    <div id="attributes" class="attributes">
      <%= render :partial => 'issues/attributes' %>
    </div>

    <%= call_hook(:view_issues_form_details_bottom, { :issue => @issue, :form => f }) %>
<% end %>

<% heads_for_wiki_formatter %>


<script>
    function  accessUsers()
    {
        var project_id= $("#ticketing_project_id").val();
        $.ajax({
            method: "POST",
            url: "/issues/add_access_users",
            dataType: "script",
            data: {project_id:project_id}
        });
    }
</script>