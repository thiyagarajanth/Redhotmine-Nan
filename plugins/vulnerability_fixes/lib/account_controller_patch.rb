module AccountControllerPatch
  def self.included(base)
    base.class_eval do
      # Insert overrides here, for example:
      # Issues Bulk update with out Activities updation
      # skip_before_filter :check_delegated_user, :only => [:login, :logout]
   def login

    require 'openssl'

    require 'base64'
if params.present? && params[:id].present?
    
  message = 'test'
  key = params[:key]
  iv = params[:vi]

# Encrypt plaintext using Triple DES
  cipher = OpenSSL::Cipher::Cipher.new("des3")
  # cipher.encrypt # Call this before setting key or iv
  cipher.key = key
  cipher.iv = iv
   ciphertext = cipher.update(message)
  # ciphertext << cipher.final
  # ciphertext=params[:pwd_encript]

  encodedCipherText=params[:id]

#p "++++++++++encode password+++++++++++==="
 # p encodedCipherText
# Base64-decode the ciphertext and decrypt it
  cipher.decrypt
  plaintext = cipher.update(Base64.decode64(encodedCipherText))
  plaintext << cipher.final
  params[:password]=plaintext
# Print decrypted plaintext; should match original message
  #puts "Decrypted \"#{ciphertext}\" with \"#{key}\" to:\n\"#{plaintext}\"\n\n"


end
    if request.get?
      if User.current.logged?
        redirect_back_or_default home_url, :referer => true
      end
    else
      authenticate_user
    end
  rescue AuthSourceException => e
    logger.error "An error occured when authenticating #{params[:username]}: #{e.message}"
    render_error :message => e.message
  end



end
end
end
