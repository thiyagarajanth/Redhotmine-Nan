class UsersAjaxAuthController < ApplicationController
  unloadable


  require 'openssl'
   require 'base64'
   
    def ajax_encript
# render text: true
   if params[:edit_user] == 'true'
   plain_password = Base64.decode64(params[:password])
   plain_password_conf = Base64.decode64(params[:password_conf])
      
   password = plain_password.to_s
   password_conf = plain_password_conf.to_s 
   # message = plain.to_s
   key = SecureRandom.hex
   iv= SecureRandom.hex
   #cipher = OpenSSL::Cipher::Cipher.new("des3")
    cipher = OpenSSL::Cipher::Cipher.new("des3")
    cipher.encrypt # Call this before setting key or iv
    cipher.key = key
    cipher.iv = iv
    ciphertext = cipher.update(password)
    ciphertext << cipher.final
    @ciphertext=ciphertext
    encodedCipherText_password = Base64.encode64(ciphertext)

    cipher = OpenSSL::Cipher::Cipher.new("des3")
    cipher.encrypt # Call this before setting key or iv
    cipher.key = key
    cipher.iv = iv
    ciphertext = cipher.update(password_conf)
    ciphertext << cipher.final
    @ciphertext=ciphertext
    encodedCipherText_password_conf = Base64.encode64(ciphertext)
  
    if request.xhr?
      render :json => {
          :encode_password_text => encodedCipherText_password,:encode_password_text_conf => encodedCipherText_password_conf,:key=> key,:vi=>iv
      }
    end

   else

   plain = Base64.decode64(params[:password])
   message = plain.to_s
   key = SecureRandom.hex
   iv= SecureRandom.hex
   #cipher = OpenSSL::Cipher::Cipher.new("des3")
    cipher = OpenSSL::Cipher::Cipher.new("des3")
    cipher.encrypt # Call this before setting key or iv
    cipher.key = key
    cipher.iv = iv
    ciphertext = cipher.update(message)
    ciphertext << cipher.final
    @ciphertext=ciphertext
    encodedCipherText = Base64.encode64(ciphertext)
    
    if request.xhr?
      render :json => {
          :encode_text => encodedCipherText,:message=>message,:key=> key,:vi=>iv
      }
    end
   end
  end
end
